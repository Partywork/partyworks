//# Leaving at adding the ImmutableOthers to the partyworksclient

//pickup at adding the event source and trying to add a general purpose subsciption thingy dunno :/
//but the focus would really be to start implementing it with useSycnExternalStore

//now since most of it works in a toy sense 
//we need to update & refactor it for it to work with typescript seamlessly & ability to add custom events 
//after the custom event on off emit emitAwait, we need to update/upgrade client and connection handling
//also adding the waitForActorId equivalent for the ROOM_STATE, but that may not be in the current toy 

//ok ther√©s a small missmatch in players property, gameState is only sending the empty gameState
  it is sending player's in a diff value

[imporvement touches]
//adding the ability to set host in the client lol  

[backend improv needed for toy funrooms]

[competing with partyrpc now]
 we're competing with party rpc on the backend & should not take the fact that we have a basic collaboration as addition advantage
 on the backend and events sending out competition for dx is purely partyrpc, other additions are nice to have but ignored 
 taking that as a base let's start rethinking

[1] the custom events should be safe to throw errors 
[2] the send property should have type safety
[3] the custom events should have input validators option 
[4] also maybe presenting a catchAll event by default

[on the fly]
//the Player should have it's own implementation of send, it should by default take events & data for send from the generics provided to the server 
//on partyworksclient adding a default all message listener, and a hook for that, all but internal messaged will be recieved 

[Small Fix]
//so in our backend presence, we need to add flags for partial | set, and send the flags from the client as well
//add flag to diff between internal messages & external ones, important for not poluting the message namespace

[TOP Points]
//giving proper and easy methods on backend to update presence & data from backend user side
//add validator function options for backend events 
//add missing selector based hooks
//also look into error handling stuff, not sure how to approach this exactly, 
      but my guess would be emit based errors. validation based errors. internal unknown errors & stuff :/ 
//adding proper support of javascript based client, things like subscribe

[Gonna add before internal soft update launch]
//Connection Engine 
//throttle + Buffers on Room level 
//Suspense support 
//authentication support, hmm dunno how to go about it :/ [maybe easily calling an async api function before connection and sending the data from the api function to the backend, and letting the user decide on the backend]
//better logging 


[improvs]
//ability to send custom data on RoomState event, we need this to atleast easily populate the data, this makes the loading state super easy
  right now we're just sitting ducks till we recieve the state, leading to showing default state in it's place, not ideal :(  ;
  but where is the right abstraction for this would be the question  
  ok whatever it is it should really work with both user's preffered statemanagement lib & our version

  [crux - now] giving a roomState eventSource hook, where user can listen for that event & update store 
               how would it be any different from user creating thier own version of it :/
               will it can be worth it in settings that use supense to be sure that state will always be loaded ;)

//so do we give like a state_store inside our client lib, which users can use to get/set/update data ?. 
  providing a state management solution internally :/. got no idea how to go about it, but thinking bout it carefully now
  it actually makes alot of sense,   

//the Player should have it's own implementation of send, it should by default take events & data for send from the generics provided to the server 

[proposals]
//adding a state management thing inside partyworks client, for easy of data management
  the question would be how owuld it work really?  

[v2]
//for backend types, we can accept them in a way, where the users can set types for send, sendData, broadcast on a per event basis  
  that'll allow for a more better & stricter typescript enforcement
//adding an ability to send custom data on Connect that should work well with suspense in a way  

//pickup on adding the actual game now, will go with the tic-tac-toe one for now, our toy version of funrooms.io 


//OK Providing a suspense version of our hooks, i think it's only possible if we have onDidLoad or something
//that can easily be doable on the room side, (i think  i already have some sore of .loaded variable setup for that)
//but bigger questions would be having a proper connection engine, and using buffers


//add a validate function option
// [on it!]properly implement info UserMeta on backend 
//giving proper validators for presene messages as well

// [i think done] leaving at the wierd generics for rooms, TEventEmit at the end & stuff, maybe also solve it lol
// [hmm on it, well let's do it while making tic-tac-toe] ok so the sane thing to do would be to add proper validations & errors on the backend ohh, and maybe a error handler event on client :/ 
//creating a basic tic-tac-toe game and publishing it, to find out all the rough edges, and take this to deployment
//after that we need to add the missing withSelector apis (boring but do it)
// [what's the point though?] adding the option of initialPresence (meh)
//after we directly need to add custom connection (scary but do it)
// [somewhat close to this] after that we need to add closing types of logic, destroy & stuff 


//session
 //fixing live-text  to work with partyworks  [done]
 //adding the data property options [...]
 //adding the missing hooks with selectors for useOther, useOthers, etc... [...]
 //adding the option of initialPresence [...]
 //adding proper trpc like events [yeah]

//super high priority
 // setting data on users on backend & initialPresence
 // connection 
 // room throttle + buffers
 // trpc 
 // error handling
 // validation 

//OK pickup at fixing the emitAwait, for some reason it's not pickinh up the event prop on the server for emit await 
 // then we move to the ability to add custom data on user & stuff 
 // maybe passing in the initialPresence & stuff. :/ . also customData from client and a simple valiator on server :/
 // then we move to add better typescript support 
 // then we move to add req/res validations maybe 
 // finnlly the big boss custom websocket handling 
    (this gives us our desired status prop for websocket status) & buffers & timeouts at room level

//ok high priority 
  // we need better typescipt support
  // we need to add error handling
  // we need to add request/response validators [zod, valibot]
  // we need to add connectionStatuses, and a custom webSocket connection handling 
  // we need to add throttle & buffers to the room
  // we need to add delayed accpeted connection, so basically wait for certain message/messages before the connection is considered establish
  // we need to add an authentication layer
  // we need a proper logging solution